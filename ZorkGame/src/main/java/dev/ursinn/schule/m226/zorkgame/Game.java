/* * MIT License * * Copyright (c) 2020 Ursin Filli * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. * */package dev.ursinn.schule.m226.zorkgame;import java.util.ArrayList;import java.util.concurrent.atomic.AtomicBoolean;public class Game {    private Parser parser;    private Room currentRoom, lastRoom, roof, buildingB, office, buildingC, reception, secretOffice;    private ArrayList<Room> rooms;    private Inventory inventory;    private boolean foundSecretRoom;    /**     * Create the game and initialise its internal map.     */    public Game() {        rooms = new ArrayList<>();        inventory = new Inventory(2);        parser = new Parser();        foundSecretRoom = false;        ArrayList<Question> questions_reception = new ArrayList<>();        questions_reception.add(new Question("Hallo?", "Hallo", null));        questions_reception.add(new Question("Key?", "Da", new Item(ItemType.KEY, 1, "Building-B-Key", null)));        ArrayList<Question> questions_secretOffice = new ArrayList<>();        questions_secretOffice.add(new Question("Key?", "Da", new Item(ItemType.KEY, 2, "Test-Room-Key", null)));        ArrayList<Question> questions_secretOffice2 = new ArrayList<>();        questions_secretOffice2.add(new Question("key?", "Da", new Item(ItemType.KEY, 2, "Building-A-Key", null)));        ArrayList<Question> questions_secretOffice3 = new ArrayList<>();        questions_secretOffice3.add(new Question("Hallo?", "Hallo!", null));        ArrayList<Person> persons_reception = new ArrayList<>();        persons_reception.add(new Person(questions_reception, "Hans"));        ArrayList<Person> persons_secretOffice = new ArrayList<>();        persons_secretOffice.add(new Person(questions_secretOffice, "Peter"));        persons_secretOffice.add(new Person(questions_secretOffice2, "Alex"));        persons_secretOffice.add(new Person(questions_secretOffice3, "Tobi"));        persons_secretOffice.add(new Person(null, "Marvin"));        ArrayList<Item> items_buildingC = new ArrayList<>();        items_buildingC.add(new Item(ItemType.OBJECT, 0, "Pflanze", new Item(ItemType.KEY, 1, "Reception-Key", null)));        ArrayList<Item> items_buildingB = new ArrayList<>();        items_buildingB.add(new Item(ItemType.OBJECT, 0, "Pflanze", new Item(ItemType.KEY, 1, "Office-Key", null)));        ArrayList<Item> items_office = new ArrayList<>();        items_office.add(new Item(ItemType.OBJECT, 0, "Fenster", null));        items_office.add(new Item(ItemType.OBJECT, 0, "Box", new Item(ItemType.KEY, 1, "Roof-Key", null)));        ArrayList<Item> items_roof = new ArrayList<>();        items_roof.add(new Item(ItemType.OBJECT, 0, "Box", new Item(ItemType.ITEM, 0, "Fernglass", null)));        items_roof.add(new Item(ItemType.OBJECT, 0, "Box", new Item(ItemType.KEY, 0, "Lab-NFC-Card", null)));        ArrayList<Item> items_lab = new ArrayList<>();        items_lab.add(new Item(ItemType.OBJECT, 0, "Box", new Item(ItemType.CODE, 0, "Secret-Office-Code", null)));        items_lab.add(new Item(ItemType.OBJECT, 0, "Box", new Item(ItemType.KEY, 2, "Secret-Office-Key", null)));        // Create all the rooms and link their exits together.        Room outside = new Room("Outside", null, null, false);        buildingC = new Room("Building C", items_buildingC, null, false);        reception = new Room("Reception", null, persons_reception, true);        buildingB = new Room("Building B", items_buildingB, null, true);        Room lab = new Room("Lab", items_lab, null, true);        office = new Room("Office", items_office, null, true);        Room buildingA = new Room("Building A", null, null, true);        Room testRoom = new Room("Test Room", null, null, true);        roof = new Room("Roof", items_roof, null, true);        secretOffice = new Room("Secret Office", null, persons_secretOffice, true);        // initialise room exits        outside.setExits(buildingA, buildingB, buildingC, null);        buildingC.setExits(outside, null, reception, null);        reception.setExits(buildingC, null, null, null);        buildingB.setExits(null, lab, office, outside);        lab.setExits(null, null, null, buildingB);        office.setExits(buildingB, null, null, null);        buildingA.setExits(null, testRoom, outside, null);        testRoom.setExits(null, null, null, buildingA);        roof.setExits(null, null, null, office);        secretOffice.setExits(null, null, null, reception);        rooms.add(outside);        rooms.add(buildingC);        rooms.add(reception);        rooms.add(buildingB);        rooms.add(lab);        rooms.add(office);        rooms.add(buildingA);        rooms.add(testRoom);        rooms.add(roof);        rooms.add(secretOffice);        currentRoom = outside; // start game outside        lastRoom = outside;        inventory.addItem(new Item(ItemType.KEY, 2, "Building-A-Key", null));        inventory.addItem(new Item(ItemType.KEY, 2, "Test-Room-Key", null));    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    /**     * Print out the opening message for the player.     */    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    /**     * Given a command, process (that is: execute) the command.     * If this command ends the game, true is returned, otherwise false is     * returned.     */    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        switch (commandWord) {            case "help":                printHelp();                break;            case "go":                goRoom(command);                break;            case "quit":                return true;            case "back":                Room back = lastRoom;                lastRoom = currentRoom;                currentRoom = back;                System.out.println(currentRoom.longDescription());                break;            case "pickup":                if (command.hasSecondWord())                    pickup(command.getSecondWord());                else                    System.err.println("Error: pickup <Item Name>");                break;            case "search":                search();                break;            case "use":                use();                break;            case "map":                rooms.forEach(room -> System.out.println(room.shortDescription()));                break;            case "talk":                if (command.hasThirdWord())                    talk(command.getSecondWord(), command.getThirdWord());                else if (command.hasSecondWord())                    talk(command.getSecondWord(), null);                else                    System.err.println("Error: talk <Name>");                break;            case "drop":                if (command.hasSecondWord())                    drop(command.getSecondWord());                else                    System.err.println("Error: drop <Item Name>");                break;            case "inv":                System.out.println("Max Wight: " + inventory.getMaxWight());                System.out.println("Current Wight: " + inventory.getCurrentWight());                inventory.getItems().forEach(item -> System.out.println("Type: " + item.getType().toString() + " Name: " + item.getName() + " Wight: " + item.getWight()));                break;        }        return false;    }    private void talk(String name, String ask) {        if (!currentRoom.isSearched()) {            System.out.println("Du must den Raum erst durchsuchen mit search");            return;        }        if (!currentRoom.hasPersons()) {            System.out.println("No Persons in Room");            return;        }        if (ask == null)            currentRoom.getPersons().forEach(person -> {                if (person.hasQuestions()) {                    if (person.getName().equalsIgnoreCase(name)) {                        person.getQuestions().forEach(question -> System.out.println(question.getQuestion()));                        if (currentRoom.shortDescription().equalsIgnoreCase("Reception")) {                            if (foundSecretRoom) {                                System.out.println("xxx");                            }                        }                    }                }            });        else {            currentRoom.getPersons().forEach(person -> {                if (person.hasQuestions()) {                    if (person.getName().equalsIgnoreCase(name)) {                        if (ask.equalsIgnoreCase("xxx")) { // TODO                            if (currentRoom.shortDescription().equalsIgnoreCase("Reception")) {                                if (foundSecretRoom) {                                    System.out.println("Da");                                    currentRoom.setExits(buildingC, secretOffice, null, null);                                    reception.setExits(buildingC, secretOffice, null, null);                                }                            }                        }                        person.getQuestions().forEach(question -> {                            if (question.getQuestion().equalsIgnoreCase(ask)) {                                System.out.println(question.getAnswer());                                if (question.hasItem())                                    inventory.addItem(question.getItem());                            }                        });                    }                }            });        }    }    private void use() {        if (inventory.getItems().size() == 0)            return;        if (currentRoom.shortDescription().equalsIgnoreCase("Office")) {            inventory.getItems().forEach(item -> {                if (item.getType() == ItemType.ITEM) {                    if (item.getName().equalsIgnoreCase("Fernglass")) {                        reception.setExits(buildingC, secretOffice, null, null);                        System.out.println("Secret Office Found!");                        foundSecretRoom = true;                    }                }            });        }    }    private void search() {        if (currentRoom.isSearched()) {            System.out.println("Der Raum wurde bereits durchsucht!");        }        currentRoom.setSearched(true);        if (!currentRoom.hasItems() && !currentRoom.hasPersons()) {            System.err.println("No Items and No Persons");            return;        }        if (currentRoom.hasItems())            currentRoom.getItems().forEach(item -> {                if (item.getType() == ItemType.OBJECT) {                    System.out.println("Durchsuche: " + item.getName() + "...");                    if (item.isContainingItem()) {                        System.out.println("Gefunden: " + item.getContains().getName());                    } else                        System.out.println("Nichts gefunden!");                }            });        if (currentRoom.hasPersons())            currentRoom.getPersons().forEach(person -> System.out.println("Sehe Person: " + person.getName()));        if (currentRoom.shortDescription().equalsIgnoreCase("Office")) {            currentRoom.setExits(buildingB, roof, null, null);            office.setExits(buildingB, roof, null, null);        }    }    private void pickup(String itemName) {        if (!currentRoom.isSearched()) {            System.out.println("Du must den Raum erst durchsuchen mit search");            return;        }        if (!currentRoom.hasItems()) {            System.out.println("No Items in Room");            return;        }        AtomicBoolean pickedUp = new AtomicBoolean(false);        currentRoom.getItems().forEach(item -> {            if (item.isContainingItem()) {                if (item.getContains().getName().equalsIgnoreCase(itemName)) {                    if (inventory.addItem(item.getContains()))                        System.out.println("Der gegenstand " + item.getContains().getName() + " wurde deinem Inventar hinzugefüght");                    else                        System.out.println("Dein Inventar ist bereits voll!");                    pickedUp.set(true);                }            }        });        if (!pickedUp.get())            System.out.println("Item Not Found");    }    private void drop(String itemName) {        for (Item item : inventory.getItems()) {            if (item.getName().equalsIgnoreCase(itemName)) {                if (inventory.removeItem(item)) {                    System.out.println("Item Droped");                } else                    System.err.println("Can't Drop Item");                return;            }        }    }    /*     * implementations of user commands:     */    /**     * Print out some help information.     * Here we print some stupid, cryptic message and a list of the     * command words.     */    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    /**     * Try to go to one direction. If there is an exit, enter the new     * room, otherwise print an error message.     */    private void goRoom(Command command) {        // if there is no second word, we don't know where to go...        if (!command.hasSecondWord())            System.out.println("Go where?");        else {            String direction = command.getSecondWord();            // Try to leave current room.            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null)                System.out.println("There is no door!");            else {                if (nextRoom.isLocked()) {                    if (nextRoom.shortDescription().equalsIgnoreCase("Reception")) {                        if (unlockRoom(ItemType.KEY, "Reception-Key")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                        } else                            System.err.println("Door Locked");                    } else if (nextRoom.shortDescription().equalsIgnoreCase("Building B")) {                        if (unlockRoom(ItemType.KEY, "Building-B-Key")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                        } else                            System.err.println("Door Locked");                    } else if (nextRoom.shortDescription().equalsIgnoreCase("Office")) {                        if (unlockRoom(ItemType.KEY, "Office-Key")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                        } else                            System.err.println("Door Locked");                    } else if (nextRoom.shortDescription().equalsIgnoreCase("Roof")) {                        if (unlockRoom(ItemType.KEY, "Roof-Key")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                        } else                            System.err.println("Door Locked");                    } else if (nextRoom.shortDescription().equalsIgnoreCase("Lab")) {                        if (unlockRoom(ItemType.KEY, "Lab-NFC-Card")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                        } else                            System.err.println("Door Locked");                    } else if (nextRoom.shortDescription().equalsIgnoreCase("Secret Office")) {                        if (unlockRoom(ItemType.CODE, "Secret-Office-Code") && unlockRoom(ItemType.KEY, "Secret-Office-Key")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                        } else                            System.err.println("Door Locked");                    } else if (nextRoom.shortDescription().equalsIgnoreCase("Building A")) {                        if (unlockRoom(ItemType.KEY, "Building-A-Key")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                        } else                            System.err.println("Door Locked");                    } else if (nextRoom.shortDescription().equalsIgnoreCase("Test Room")) {                        if (unlockRoom(ItemType.KEY, "Test-Room-Key")) {                            nextRoom.setLocked(false);                            goNextRoom(nextRoom);                            System.out.println("You Won!");                            System.exit(0);                        } else                            System.err.println("Door Locked");                    } else                        System.err.println("Door Locked");                } else                    goNextRoom(nextRoom);            }        }    }    private void goNextRoom(Room nextRoom) {        lastRoom = currentRoom;        currentRoom = nextRoom;        System.out.println(currentRoom.longDescription());    }    private boolean unlockRoom(ItemType type, String desc) {        AtomicBoolean back = new AtomicBoolean(false);        inventory.getItems().forEach(item -> {            if (item.getType() == type) {                if (item.getName().equalsIgnoreCase(desc))                    back.set(true);            }        });        return back.get();    }}